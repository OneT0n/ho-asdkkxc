print('[START] Version: 1.1')

import asyncio
import logging

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommand
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, KeyboardButton, InlineKeyboardButton

from database import *
from settings import *


logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

class AdminState(StatesGroup):
    waiting_for_user_id_add_stars = State()
    waiting_for_stars_amount_add = State()
    waiting_for_user_id_remove_stars = State()
    waiting_for_stars_amount_remove = State()
    waiting_for_mailing_text = State()
    waiting_for_channel_id_add = State()
    waiting_for_channel_id_delete = State()
    waiting_for_promocode_activation = State()
    waiting_for_promo_details_add = State()
    waiting_for_promocode_delete = State()

def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚≠êÔ∏è –í–æ–∑—å–º–∏—Å—å –∑–∞ –¥–µ–ª–æ, –∑–∞—Ä–∞–±–æ—Ç–∞–π –∑–≤–µ–∑–¥!" )
    builder.button(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã")
    builder.row(
        KeyboardButton(text='üè° –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    )
    builder.row(
        KeyboardButton(text=" –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
    )
    return builder.as_markup(resize_keyboard=True)

@router.message(StateFilter(AdminState.waiting_for_user_id_add_stars))
async def process_add_stars_user_id(message: types.Message, state: FSMContext):
    await state.update_data(user_id_add_stars=message.text)
    await bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>", parse_mode='HTML')
    await state.set_state(AdminState.waiting_for_stars_amount_add)

@router.message(StateFilter(AdminState.waiting_for_stars_amount_add))
async def process_add_stars_amount(message: types.Message, state: FSMContext):
    try:
        stars = int(message.text)
        data = await state.get_data()
        user_id = int(data.get("user_id_add_stars"))
        increment_stars(user_id, stars)
        await bot.send_message(message.chat.id, f"<b>‚úÖ {stars} –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}</b>", parse_mode='HTML')
        await bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞–º {stars} –∑–≤–µ–∑–¥!", parse_mode='HTML')
    except ValueError:
        await bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>", parse_mode='HTML')
    except TypeError:
        await bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.</b>", parse_mode='HTML')
    await state.clear()

@router.message(StateFilter(AdminState.waiting_for_user_id_remove_stars))
async def process_remove_stars_user_id(message: types.Message, state: FSMContext):
    await state.update_data(user_id_remove_stars=message.text)
    await bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", parse_mode='HTML')
    await state.set_state(AdminState.waiting_for_stars_amount_remove)

@router.message(StateFilter(AdminState.waiting_for_stars_amount_remove))
async def process_remove_stars_amount(message: types.Message, state: FSMContext):
    try:
        stars = int(message.text)
        data = await state.get_data()
        user_id = int(data.get("user_id_remove_stars"))
        deincrement_stars(user_id, stars)
        await bot.send_message(message.chat.id, "<b>‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>", parse_mode='HTML')
    except ValueError:
        await bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>", parse_mode='HTML')
    except TypeError:
        await bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.</b>", parse_mode='HTML')
    await state.clear()

@router.message(StateFilter(AdminState.waiting_for_mailing_text))
async def process_mailing_text(message: types.Message, state: FSMContext):
    text = message.text
    users = get_users()
    counter = 0

    for user in users:
        user_id = user[0]
        ref_link = f"\n\n–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ ‚Äî https://t.me/{ (await bot.me()).username }?start={user_id}"
        full_text = f"{text}{ref_link}"

        try:
            counter += 1
            await bot.send_message(user_id, f"<b>{full_text}</b>", parse_mode='HTML')
            print(f"[–†–ê–°–°–´–õ–ö–ê] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
        except Exception as e:
            print(f"[–†–ê–°–°–´–õ–ö–ê] –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")

    await bot.send_message(message.chat.id, f"<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {counter}/{str(len(users))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>", parse_mode='HTML')
    await state.clear()

@router.message(StateFilter(AdminState.waiting_for_channel_id_add))
async def process_add_channel_id(message: types.Message, state: FSMContext):
    try:
        channel_id_to_add = int(message.text)
        if channel_id_to_add not in channel_ids:
            channel_ids.append(channel_id_to_add)
            await bot.send_message(message.chat.id, "<b>‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", parse_mode='HTML')
        else:
            await bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.</b>", parse_mode='HTML')
    except ValueError:
        await bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞!</b>", parse_mode='HTML')
    await state.clear()

@router.message(StateFilter(AdminState.waiting_for_channel_id_delete))
async def process_delete_channel_id(message: types.Message, state: FSMContext):
    try:
        channel_id_to_delete = int(message.text)
        if channel_id_to_delete in channel_ids:
            channel_ids.remove(channel_id_to_delete)
            await bot.send_message(message.chat.id, "<b>‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode='HTML')
        else:
            await bot.send_message(message.chat.id, "<b>‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='HTML')
    except ValueError:
        await bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞!</b>", parse_mode='HTML')
    await state.clear()

@router.message(StateFilter(AdminState.waiting_for_promocode_activation))
async def process_promocode_activation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    promocode = message.text
    success, result = use_promocode(promocode, user_id)
    if success:
        await bot.send_message(message.chat.id, f"<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {result} ‚≠êÔ∏è</b>", parse_mode='HTML')
    else:
        await bot.send_message(message.chat.id, f"<b>‚ùå –û—à–∏–±–∫–∞: {result}</b>", parse_mode='HTML')
    await state.clear()

@router.message(StateFilter(AdminState.waiting_for_promo_details_add))
async def process_add_promo_details(message: types.Message, state: FSMContext):
    try:
        promocode, stars_str, uses_str = message.text.split(",")
        stars = int(stars_str.strip())
        uses = int(uses_str.strip())
        add_promocode(promocode.strip(), stars, uses)
        await bot.send_message(message.chat.id, "<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", parse_mode='HTML')
    except ValueError:
        await bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.</b>", parse_mode='HTML')
    await state.clear()

@router.message(StateFilter(AdminState.waiting_for_promocode_delete))
async def process_delete_promo(message: types.Message, state: FSMContext):
    try:
        promocode = message.text.strip()
        deactivate_promocode(promocode)
        await bot.send_message(message.chat.id, "<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode='HTML')
    except ValueError:
        await bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!</b>", parse_mode='HTML')
    await state.clear()

@router.message(CommandStart())
async def handle_start(message: types.Message, bot: Bot):
    args = message.text.split()
    user_id = message.from_user.id
    username = message.from_user.username or f"User{user_id}"
    ref_link = f"https://t.me/{ (await bot.me()).username }?start={user_id}"

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={ref_link}")
    markup = builder.as_markup()

    start_command = BotCommand(command='start', description='–ó–∞–ø—É—Å–∫')
    why_command = BotCommand(command='why', description='üåü –ë—Ä–∏–≥–∞–¥–∞!')
    await bot.set_my_commands([start_command, why_command])
    await bot.set_chat_menu_button(
        chat_id=message.chat.id,
        menu_button=types.MenuButtonCommands()
    )

    if not user_exists(user_id):
        referral_id = None
        if len(channel_ids) > 0:
            if await check_subscription(user_id, channel_ids, bot):
                return
        if len(args) > 1 and args[1].isdigit():
            referral_id = int(args[1])
            if user_exists(referral_id):
                await bot.send_message(referral_id, f"<b>üí•–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ +0.65‚≠êÔ∏è\n\n–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π ‚Äî {ref_link}</b>", parse_mode='HTML')
                increment_referrals(referral_id)
                increment_stars(referral_id, 0.65)
        add_user(user_id, username, referral_id)
        await bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=get_main_keyboard())
        await bot.send_message(user_id, f"<b>üî• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n\n–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +0.65 ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n\n‚õìÔ∏è‚Äçüí•–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ - {ref_link}</b>", parse_mode='HTML', reply_markup=markup)
    else:
        if len(channel_ids) > 0:
            if await check_subscription(user_id, channel_ids, bot):
                return
        await bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=get_main_keyboard())
        await bot.send_message(user_id, f"<b>üî• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n\n–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +0.65 ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n\n‚õìÔ∏è‚Äçüí•–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ - {ref_link}</b>", parse_mode='HTML', reply_markup=markup)

@router.message(Command("why"))
async def handle_why_command(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    ref_link = f"https://t.me/{ (await bot.me()).username }?start={user_id}"
    if user_exists(user_id):
        await bot.send_message(user_id, f"üåü –í Telegram –∑–≤–µ–∑–¥—ã ‚Äî —ç—Ç–æ <b>–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è</b> –≤–∞–ª—é—Ç–∞. –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –ø–æ 0.65‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ! –ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å, –¥–∞—Ä–∏—Ç—å –¥—Ä—É–∑—å—è–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ –≤ –±–æ—Ç–∞—Ö –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö. –î–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! {ref_link}</i>", parse_mode='HTML')
    else:
        await bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. (P.S) –±–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫–∞–∫ :(( ")

@router.message(Command("adminpanel"))
async def adminpanel_command(message: types.Message, bot: Bot):
    if message.from_user.id in admins:
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚≠êÔ∏è –í—ã–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="add_stars"),
            InlineKeyboardButton(text="‚≠êÔ∏è –°–Ω—è—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="remove_stars")
        )
        builder.row(
            InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing")
        )
        builder.row(
            InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel"),
            InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='delete_channel')
        )
        builder.row(
            InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞ 0 —Ä–µ—Ñ", callback_data='mailing_zero_refs')
        )
        builder.row(
            InlineKeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='add_promo_code'),
            InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='remove_promo_code')
        )
        markup = builder.as_markup()
        await bot.send_message(message.chat.id, f"<b>üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {get_user_count()}\nüí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: {get_total_withdrawn()} ‚≠êÔ∏è</b>", parse_mode='HTML', reply_markup=markup)

@router.message()
async def handle_reply_buttons(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    ref_link = f"https://t.me/{ (await bot.me()).username }?start={user_id}"
    if message.text == "‚≠êÔ∏è –í–æ–∑—å–º–∏—Å—å –∑–∞ –¥–µ–ª–æ, –∑–∞—Ä–∞–±–æ—Ç–∞–π –∑–≤–µ–∑–¥!":
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ–¥–µ–ª–∏—Å—å –∫–∞ —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ :)", url=f"https://t.me/share/url?url={ref_link}")
        markup = builder.as_markup()
        await bot.send_message(message.chat.id, f"<b>üéâ–ù—É –∂–µ! –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –ø–æ–ª—É—á–∞–π +0.65 ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–≤–æ—é —Å—Å—ã–ª–∫—É:\n\n‚Ä¢ –≤ –õ–° –∑–Ω–∞–∫–æ–º—ã–º\n‚Ä¢ –≤ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª\n‚Ä¢ –ø–æ —á—É–∂–∏–º –≥—Ä—É–ø–ø–∞–º\n‚Ä¢ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —Ç–∏–∫ —Ç–æ–∫–∞\n‚Ä¢ –≤–∫/–∏–Ω—Å—Ç/–≤–∞—Ç—Å–∞–ø –∏ –¥—Ä. —Å–æ—Ü —Å–µ—Ç–∏\n\nüîó –¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ - {ref_link}</b>", parse_mode='HTML', reply_markup=markup)
    elif message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã":
        user_data = get_user(user_id)
        if user_data:
            stars = user_data[2]
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="15 ‚≠êÔ∏è", callback_data="15"),
                InlineKeyboardButton(text="25 ‚≠êÔ∏è", callback_data="25")
            )
            builder.row(
                InlineKeyboardButton(text="50 ‚≠êÔ∏è", callback_data="50"),
                InlineKeyboardButton(text="100 ‚≠êÔ∏è", callback_data="100")
            )
            builder.row(
                InlineKeyboardButton(text="150 ‚≠êÔ∏è", callback_data="150"),
                InlineKeyboardButton(text="350 ‚≠êÔ∏è", callback_data="350")
            )
            builder.row(
                InlineKeyboardButton(text="500 ‚≠êÔ∏è", callback_data="500")
            )
            withdraw_stars_markup = builder.as_markup()
            await bot.send_message(message.chat.id, f"<b>üí∞–ë–∞–ª–∞–Ω—Å: {stars}\n\nüßë‚ÄçüíºCEO - @wuspy\n\n‚ùì–°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏?:</b>", parse_mode='HTML', reply_markup=withdraw_stars_markup)
    elif message.text == "üè° –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        user_data = get_user(user_id)
        builder = InlineKeyboardBuilder()
        builder.button(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")
        markup_profile = builder.as_markup()
        if user_data:
            count_refs = user_data[3]
            withdrawed = user_data[5]
            stars = user_data[2]
            await bot.send_message(user_id, f'<b>–£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É: {stars} ‚≠êÔ∏è\n–í—ã–≤–µ–¥–µ–Ω–æ –∑–≤–µ–∑–¥: {withdrawed} ‚≠êÔ∏è\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_refs}\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ - {ref_link}</b>', parse_mode='HTML', reply_markup=markup_profile)
        else:
            await bot.send_message(user_id, "<b>–ì–¥–µ–∂ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?! . –°–∫–æ—Ä–µ–µ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>", parse_mode='HTML')
    elif message.text == "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è":
        await bot.send_message(user_id, "<b>üéØ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ!</b>", parse_mode='HTML')
    else:
        await bot.send_message(user_id, f"<b>‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!</b>", parse_mode='HTML', reply_markup=get_main_keyboard())


@router.callback_query()
async def handle_stars_callback(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    username = call.from_user.username
    user_data = get_user(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ref_link –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    if user_data:
        ref_link = f"https://t.me/{(await bot.me()).username}?start={user_id}"

        stars = user_data[2]
        if call.data in ['15', '25', '50', '100', '150', '350', '500']:
            if int(call.data) > stars:
                await bot.answer_callback_query(call.id, "–ù–µ—Ç —Å—Ç–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ —É –≤–∞—Å:( ", show_alert=True)
            else:
                await bot.answer_callback_query(call.id, "–£—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å.", show_alert=True)
                withdraw_stars(user_id, int(call.data))
                for admin in admins:
                    await bot.send_message(admin, f"<b>‚úÖ C–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} | {user_id} \nüí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{int(call.data)}</code>‚≠êÔ∏è </b>", parse_mode='HTML')
    else:
        ref_link = f"https://t.me/{(await bot.me()).username}?start={user_id}"

    if call.data == "add_stars":
        await bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>", parse_mode='HTML')
        await state.set_state(AdminState.waiting_for_user_id_add_stars)
    if call.data == "remove_stars":
        await bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>", parse_mode='HTML')
        await state.set_state(AdminState.waiting_for_user_id_remove_stars)
    if call.data == "mailing":
        await bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", parse_mode='HTML')
        await state.set_state(AdminState.waiting_for_mailing_text)
    if call.data == "add_channel":
        await bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:</b>", parse_mode='HTML')
        await state.set_state(AdminState.waiting_for_channel_id_add)
    if call.data == 'delete_channel':
        await bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:</b>", parse_mode='HTML')
        await state.set_state(AdminState.waiting_for_channel_id_delete)
    if call.data == 'mailing_zero_refs':
        text = "‚ÅâÔ∏èü§®–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∏ 1 –¥—Ä—É–≥–∞!\n\n–ü–µ—Ä–µ—à–ª–∏ —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, –∞ —Ç–∞–∫–∂–µ –ø–æ —á–∞—Ç–∞–º, 0.65 ‚≠êÔ∏è –∑–∞ 1 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ‚§µÔ∏è"
        users = get_user_zero_referrals()

        for user in users:
            user_id = user[0]
            ref_link = f"\n\n–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî https://t.me/{(await bot.me()).username}?start={user_id}"
            full_text = f"{text}{ref_link}"

            try:
                await bot.send_message(user_id, f"<b>{full_text}</b>", parse_mode='HTML')
                print(f"[–†–ê–°–°–´–õ–ö–ê 1.0] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
            except Exception as e:
                print(f"[–†–ê–°–°–´–õ–ö–ê 1.0] –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")

        await bot.send_message(call.message.chat.id, "<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>", parse_mode='HTML')
    if call.data == "check_subs":
        if await check_subscription(user_id, channel_ids, bot):
            await bot.send_message(user_id, "<b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!</b>", parse_mode='HTML')
        else:
            reff_link = f"https://t.me/{(await bot.me()).username}?start={user_id}"
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π ‚ò∫Ô∏è", url="https://t.me/share/url?url=" + reff_link)
            )
            markup = builder.as_markup()
            await bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=get_main_keyboard())
            await bot.send_message(user_id, f"<b>üî• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n\n–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +0.65 ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n\n‚õìÔ∏è‚Äçüí•–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ - {ref_link}</b>", parse_mode='HTML', reply_markup=markup)
    if call.data == "promocode":
        await bot.send_message(user_id, "<b>üéÑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:</b>", parse_mode='HTML')
        await state.set_state(AdminState.waiting_for_promocode_activation)
    if call.data == "add_promo_code":
        await bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>", parse_mode='HTML')
        await state.set_state(AdminState.waiting_for_promo_details_add)
    if call.data == "delete_promo_code":
        await bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:</b>", parse_mode='HTML')
        await state.set_state(AdminState.waiting_for_promocode_delete)
    await call.answer()

async def check_subscription(user_id, channel_ids, bot: Bot):
    if not channel_ids:
        return True

    builder = InlineKeyboardBuilder()
    show_join_button = False
    for channel_id in channel_ids:
        try:
            chat_member = await bot.get_chat_member(channel_id, user_id)
            if chat_member.status not in ['member', 'administrator', 'creator', 'restricted']:
                invite_link = (await bot.create_chat_invite_link(channel_id, member_limit=1)).invite_link
                builder.button(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=invite_link)
                show_join_button = True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return False

    if show_join_button:
        builder.row(
            InlineKeyboardButton(text="üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", url="https://t.me/StarsPresent_robot?start=link_12")
        )
        
        builder.row(
            InlineKeyboardButton(text="ü•∂ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!", url="https://t.me/+QGpgBOLMLWI3ZDUy")
        )
        
        builder.row(
            InlineKeyboardButton(text="ü§ë –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–ø–∏—Å–∫–∏..", callback_data="check_subs")
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ StarsPresent
        markup = builder.as_markup()
        await bot.send_message(user_id, "<b>üßê –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥–æ—Ä–æ–≥–æ–π(-–∞—è) \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!</b>", parse_mode='HTML', reply_markup=markup)
        return True

    return False


dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
